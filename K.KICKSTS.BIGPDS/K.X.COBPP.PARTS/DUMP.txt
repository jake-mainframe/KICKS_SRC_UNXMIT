 /////////////////////////////////////////////////////////////////////
 // 'KICKS for TSO' is a product to deliver 'CICS like' functionality
 // in MVS/TSO. Its CICS functionality is delivered at the source code
 // level, not at the object code level. Applications must be
 // recompiled and the recompiled programs are not compatible with any
 // known version of 'real' CICS (the IBM program product),
 //
 // © Copyright 2008-2014, Michael Noel, All Rights Reserved.
 //
 // Usage of 'KICKS for TSO' is in all cases subject to license. See
 // http://www.kicksfortso.com
 // for most current information regarding licensing options..
 ////////1/////////2/////////3/////////4/////////5/////////6/////////7

void Do_DUMP() {
// force a storage dump
// EXEC CICS DUMP ÝTRANSACTION¨ DUMPCODE(name) ÝFROM(data-area)
//       ÝLENGTH(data-value) | FLENGTH(data-value)¨¨
//       ÝSEGMENTLIST(data-area) LENGTHLIST(data-area) NUMSEGMENTS(data-area)¨
//       ÝCOMPLETE¨ ÝTRT¨ ÝTASK¨ ÝSTORAGE¨ ÝPROGRAM¨ ÝTERMINAL¨ ÝTABLES¨
//       ÝDCT¨ ÝFCT¨ ÝPCT¨ ÝPPT¨ ÝSIT¨ ÝTCT¨ END-EXEC.

// *** most args ignored, only DUMPCODE handled...

 char opÝ100¨, abcodeÝ10¨="", opsÝ10¨Ý100¨, *ip;
 char errÝ100¨, saveblocksÝ4000¨;
 char fromÝ100¨="", fromlengthÝ100¨="-1";
 int  i, numops=0;

 // break up string my way
 numops = 0;
 strcpy(saveblocks, cicsblks);
 ip = SPCLTOK(saveblocks, " ");   // EXEC
 while (ip=SPCLTOK(0, " ")) {     // KICKS, verb, ... END-EXEC
  strcpy(opsÝnumops¨, ip);
  numops++;
  }

 // march thru the args
 for (i=0; i<numops; i++) {
  strcpy(op, opsÝi¨);
  if(strlen(op)==0) { continue; }
  if(MYbegstr(op,".")) { continue; }
  if(MYbegstr(op,"RESP")) { continue; }
  if(MYbegstr(op,"RESP2")) { continue; }
  if(MYbegstr(op,"NOHANDLE")) { continue; }
  if(MYbegstr(op,"EXEC")) { continue; }
  if(MYbegstr(op,"KICKS")) { continue; }
  if(MYbegstr(op,"END-EXEC")|| MYbegstr(op,";")) { continue; }

  if( MYbegstr(op,"TRANSACTION") ||
      MYbegstr(op,"SEGMENTLIST") || MYbegstr(op,"LENGTHLIST") ||
      MYbegstr(op,"NUMSEGMENTS") || MYbegstr(op,"COMPLETE") ||
      MYbegstr(op,"TRT") || MYbegstr(op,"TASK") ||
      MYbegstr(op,"STORAGE") || MYbegstr(op,"PROGRAM") ||
      MYbegstr(op,"TERMINAL") || MYbegstr(op,"TABLES") ||
      MYbegstr(op,"DCT") || MYbegstr(op,"FCT") ||
      MYbegstr(op,"PCT") || MYbegstr(op,"PPT") ||
      MYbegstr(op,"SIT") || MYbegstr(op,"TCT")
    ) {
   sprintf(err,
     " unsupported argument %s of %s is ignored", op, blk_op1);
   prt_error(err, 2);
   continue;
   }

  if(MYbegstr(op,"DUMPCODE")) {
   ip = strtok(op, "()");   // DUMPCODE
   ip = strtok(0, "()");    // the 'code'
   if (ip == NULL) {
    sprintf(err,
    "malformed argument %s of DUMP", op);
    prt_error(err, 8);
    No_Code();
    return;
    }
   parrensDown(ip);
   strcpy(abcode, ip);
   fixXNAME(abcode, 4);
   continue;
   }

  if(MYbegstr(op,"DUMP")) { continue; }

  if(MYbegstr(op,"LENGTH") || MYbegstr(op,"FLENGTH")) {
   ip = strtok(op, "()");   // LENGTH/FLENGTH
   ip = strtok(0, "()");    // the name of the var to get data
   if (ip == NULL) {
    sprintf(err,
    "malformed argument %s of DUMP", op);
    prt_error(err, 8);
    No_Code();
    return;
    }
   parrensDown(ip);
   strcpy(fromlength, ip);
   continue;
   }

  if(MYbegstr(op,"FROM")) {
   ip = strtok(op, "()");   // FROM
   ip = strtok(0, "()");    // the name of the var to get data
   if (ip == NULL) {
    sprintf(err,
    "malformed argument %s of DUMP", op);
    prt_error(err, 8);
    No_Code();
    return;
    }
   parrensDown(ip);
   strcpy(from, ip);
   continue;
   }

  sprintf(err,
    " unknown argument %s of %s", op, blk_op1);
  prt_error(err, 8);
  No_Code();
  return;
  }

#ifdef PPCOB
 if (!strcmp(abcode,"")) strcpy(abcode, "SPACES");
 fprintf(stdout, "           MOVE 7170 TO EIBFN-2\n");
 fprintf(stdout, "           MOVE %s TO KIK-ABND\n", abcode);
 if(fromÝ0¨ == 0)
  fprintf(stdout, "           MOVE 0 TO KIK-FLAGS\n");
 else
  fprintf(stdout, "           MOVE 1 TO KIK-FLAGS\n");
 if (fromÝ0¨ != 0) {
  if (fromÝ0¨=='\'') {
   fprintf(stdout, "           MOVE %s TO KIK-MSG\n", from);
   }
  { // if no lenght spec maybe use literal length?
  if (fromlengthÝ0¨=='-') {
   if (fromÝ0¨=='\'') {
    int fl;
    fl = strlen(from) - 2;
    sprintf(fromlength, "%d", fl);
    }
   else
    // or maybe use 'LENGTH OF'
    sprintf(fromlength, "LENGTH OF %s", from);
   }
  }
  { // handle 'LENGTH OF'
  char bufÝ90¨, buf2Ý90¨; int result;
  sprintf(buf2, "           MOVE %s TO KIK-FLEN\n", fromlength);
  strcpy(buf, buf2);
  result = DoLengthOf(buf2);
  switch (result) {
   case 0: // note problem with current
    prt_error("can't resolve LENGTH OF ...", 4);
    break;
   case 1: // card as is
    break;
   case 2: // comment current, proceed with replacement
    prt_as_comment(buf);
    break;
   default:
    prt_error("invalid return from DoLengthOf ...", 12);
   }
  prt_normal (buf2);
  }
  }
 fprintf(stdout, "           CALL 'KIKCOBGL' USING KIKEIB,\n");
 fprintf(stdout, "                 KIK-V1,\n");
 fprintf(stdout, "                 KIK-ABND,\n");
 fprintf(stdout, "                 KIK-FLAGS");
 if (fromÝ0¨ != 0) {
  fprintf(stdout, ",\n");
  if (fromÝ0¨=='\'')
   fprintf(stdout, "                 KIK-MSG,\n");
  else
   fprintf(stdout, "                 %s,\n", from);
  fprintf(stdout, "                 KIK-FLEN");
  }
#endif
#ifdef PPGCC
 if (!strcmp(abcode,"")) strcpy(abcode, "\"    \"");
 if(fromÝ0¨ != 0) {
  // if no lenght spec maybe use literal length?
  if (fromlengthÝ0¨=='-') {
   if (fromÝ0¨=='\"') {
    int fl;
    fl = strlen(from) - 2;
    sprintf(fromlength, "%d", fl);
    }
   else
    // or maybe use 'sizeof'
    sprintf(fromlength, "sizeof(%s)", from);
   }
  }
 fprintf(stdout, "\t{ short *eibfn2 = (short*)&__KIKEIB->eibfn;\n");
 fprintf(stdout, "\t\t*eibfn2 = 7170;\n");
 fprintf(stdout, "\t  int *v=&KIK_V1;\n");
 if(fromÝ0¨ == 0) {
  fprintf(stdout, "\t int fromtype=0, *FLAGS=&fromtype;\n");
  fprintf(stdout, "\t kikgccgl(__KIKEIB, v, %s, FLAGS);\n", abcode);
  }
 else {
  fprintf(stdout, "\t int fromtype=1, *FLAGS=&fromtype;\n");
  fprintf(stdout, "\t  char *FROM=(char*)%s;\n", from);
  fprintf(stdout, "\t  int fl=%s, *FL=&fl;\n", fromlength);
  fprintf(stdout, "\t kikgccgl(__KIKEIB, v, %s, FLAGS,\n", abcode);
  fprintf(stdout, "\t\tFROM, FL);\n");
 }
#endif
}
