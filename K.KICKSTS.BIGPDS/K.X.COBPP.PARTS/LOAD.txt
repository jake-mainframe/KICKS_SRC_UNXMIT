 /////////////////////////////////////////////////////////////////////
 // 'KICKS for TSO' is a product to deliver 'CICS like' functionality
 // in MVS/TSO. Its CICS functionality is delivered at the source code
 // level, not at the object code level. Applications must be
 // recompiled and the recompiled programs are not compatible with any
 // known version of 'real' CICS (the IBM program product),
 //
 // © Copyright 2008-2014, Michael Noel, All Rights Reserved.
 //
 // Usage of 'KICKS for TSO' is in all cases subject to license. See
 // http://www.kicksfortso.com
 // for most current information regarding licensing options..
 ////////1/////////2/////////3/////////4/////////5/////////6/////////7

void Do_LOAD() {
// retrieve and load an object module and return its length and address
// EXEC CICS LOAD PROGRAM(name) ÝSET(pointer-ref)¨ ÝLENGTH(data-area) |
//       FLENGTH(data-area)¨
//       ÝENTRY(pointer-ref)¨ ÝHOLD¨ END-EXEC.
// sll args accepted, none required. SET is load point, ENTRY is EP
 char opÝ100¨, opsÝ10¨Ý100¨, *ip;
 char errÝ100¨, saveblocksÝ4000¨;
 int  i, numops=0,flags=25;
 // 26(16+8+1)  is lenght/flenght not spec; size not spec
 char pgmÝ80¨, setÝ100¨="";

#ifdef PPCOB
 //
 // NOTE off label use of KIK-AIDS1 as dummy variables
 //
 char flaÝ100¨="KIK-AIDS1",
     setaÝ100¨="KIK-AIDS1",
     entaÝ100¨="KIK-AIDS1";
#endif
#ifdef PPGCC
 char flaÝ100¨="KIK_FLEN",
      setaÝ100¨="KIK_FLEN",
      entaÝ100¨="KIK_FLEN";
#endif

 numops = 0;
 strcpy(saveblocks, cicsblks);
 ip = SPCLTOK(saveblocks, " ");   // EXEC
 while (ip=SPCLTOK(0, " ")) {     // KICKS, verb, ... END-EXEC
  strcpy(opsÝnumops¨, ip);
  numops++;
  }

 // march thru the args
 for (i=0; i<numops; i++) {
  strcpy(op, opsÝi¨);
  if(strlen(op)==0) { continue; }
  if(MYbegstr(op,".")) { continue; }
  if(MYbegstr(op,"RESP")) { continue; }
  if(MYbegstr(op,"RESP2")) { continue; }
  if(MYbegstr(op,"NOHANDLE")) { continue; }
  if(MYbegstr(op,"EXEC")) { continue; }
  if(MYbegstr(op,"KICKS")) { continue; }
  if(MYbegstr(op,"LOAD")) { continue; }
  if(MYbegstr(op,"END-EXEC") || MYbegstr(op,";")) { continue; }
  if(MYbegstr(op,"PROGRAM")) {
   ip = strtok(op, "()");   // PROGRAM
   ip = strtok(0, "()");    // the name of the program
   if (ip == NULL) {
    parrensDown(ip);
    sprintf(err,
    "malformed argument %s of LOAD", op);
    prt_error(err, 8);
    No_Code();
    return;
    }
   strcpy(pgm, ip);
   fixXNAME(pgm, 8);
   continue;
   }
  if(MYbegstr(op,"SET")) {
   ip = strtok(op, "()");   // SET
   ip = strtok(0, "()");    // the name of SET arg
   if (ip == NULL) {
    sprintf(err,
    "malformed argument %s of LOAD", op);
    prt_error(err, 8);
    No_Code();
    return;
    }
   parrensDown(ip);
   strcpy(seta, ip);
   flags |= 4; // note SET specified (flags bit 4 set)
   continue;
   }
  if(MYbegstr(op,"ENTRY")) {
   ip = strtok(op, "()");   // ENTRY
   ip = strtok(0, "()");    // the name of ENTRY arg
   if (ip == NULL) {
    sprintf(err,
    "malformed argument %s of LOAD", op);
    prt_error(err, 8);
    No_Code();
    return;
    }
   parrensDown(ip);
   strcpy(enta, ip);
   flags &= ~8; // note ENTRY specified (flags bit 8 unset)
   continue;
   }
  if(MYbegstr(op,"FLENGTH")) {
   ip = strtok(op, "()");   // FLENGTH
   ip = strtok(0, "()");    // the name of FLENGTH arg
   if (ip == NULL) {
    sprintf(err,
    "malformed argument %s of LOAD", op);
    prt_error(err, 8);
    No_Code();
    return;
    }
   parrensDown(ip);
   strcpy(fla, ip);
   flags &= ~1;
   flags &= ~16; // note FLENGTH specified (flags bits 1 & 16 unset)
   continue;
   }
  if(MYbegstr(op,"LENGTH")) {
   ip = strtok(op, "()");   // LENGTH
   ip = strtok(0, "()");    // the name of LENGTH arg
   if (ip == NULL) {
    sprintf(err,
    "malformed argument %s of LOAD", op);
    prt_error(err, 8);
    No_Code();
    return;
    }
   parrensDown(ip);
   strcpy(fla, ip);
   flags |= 1;
   flags &= ~1; // note LENGTH specified (flags bit 1 set, 16 unset)
   continue;
   }
  if(MYbegstr(op,"HOLD")) { flags |= 2; continue; } // flags bit 2 set

  sprintf(err,
    "unknown/unsupported argument %s of %s", op, blk_op1);
  prt_error(err, 8);
  No_Code();
  return;
  }

#ifdef PPCOB
 fprintf(stdout, "           MOVE 3590 TO EIBFN-2\n");
 fprintf(stdout, "           MOVE %s TO KIK-PROGRAM\n", pgm);
 fprintf(stdout, "           MOVE %d TO KIK-FLAGS\n", flags);
 fprintf(stdout, "           CALL 'KIKCOBGL' USING KIKEIB,\n");
 if (!strcmp(respvar, ""))
  fprintf(stdout, "                 KIK-V1,\n");
 else
  fprintf(stdout, "                 KIK-V2,\n");
  fprintf(stdout,
    "                 KIK-PROGRAM, %s,\n", enta);
  fprintf(stdout,
    "                 %s, KIK-FLAGS, %s", fla, seta);
#endif
#ifdef PPGCC
 fprintf(stdout, "\t{ short *eibfn2 = (short*)&__KIKEIB->eibfn;\n");
 fprintf(stdout, "\t\t*eibfn2 = 3590;\n");
 if (!strcmp(respvar, ""))
  fprintf(stdout, "\t  int *v=&KIK_V1;\n");
 else
  fprintf(stdout, "\t  int *v=&KIK_V2;\n");
 fprintf(stdout, "\t  int flags=%d, *FLAGS=&flags;\n", flags);
 fprintf(stdout, "\t  int KIK_FLEN;\n");
 fprintf(stdout, "\t kikgccgl(__KIKEIB, v, &%s, &%s,\n", pgm, enta);
 fprintf(stdout, "\t    &%s, FLAGS, &%s);\n", fla, seta);
#endif
}
