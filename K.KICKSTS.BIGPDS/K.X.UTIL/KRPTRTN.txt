//*///////////////////////////////////////////////////////////////////
//* Routine to (nicely) report step name and return code
//*
//* KRPTRTN rcode tcode 1stcol 2ndcol txt1 txt2 txt3 ...
//*
//* © Copyright 2008-2012, Michael Noel, All Rights Reserved.
//*
//* Usage of 'KICKS for CMS' is in all cases subject to license. See
//* http://www.kicksfortso.com
//* for most current information regarding licensing options..
//*//////1/////////2/////////3/////////4/////////5/////////6/////////7

//*
//* gcce krptrtn
//* term chardel off
//* load krptrtn (clear
//* include @@kstrt (reset @@kstrt
//* genmod krptrtn
//*

#include <stdio.h>
#include <string.h>

extern int __KSR1;

int main (int argc, char *argvÝ¨) {

int   ARGC=0;
char *ARGVÝ20¨;

int i, rc, tc, col1, col2;
char txtbufÝ80¨, *ip;
char prtbufÝ80¨;

// regenerate ARGC, ARGV as the input parms may
// be fouled up by a failed gcc compile step...

ip = __KSR1; // recover pre-CMSSTART r1

while (*ip != 0xff) {
 if (ARGC > 19) break;
 ARGVÝARGC++¨ = ip;
 ip += 8;
 }

// now use ARGC/ARGV instead of argc/argv...

memset(txtbuf, 0, 80);
memset(prtbuf, 0, 80);

rc   = strtol(ARGVÝ1¨, NULL, 10);
if (rc == -2)  exit (0);   // unused step...
if (rc <  -1)  exit (rc);  // let them figure it...
tc   = strtol(ARGVÝ2¨, NULL, 10);
if (tc <   0)  exit (997);
col1 = strtol(ARGVÝ3¨, NULL, 10);
if (col1 > 20) exit (998);
col2 = strtol(ARGVÝ4¨, NULL, 10);
if (col2 > 60) exit (999);

for (i=5; i<ARGC; i++) {
 if(strlen(txtbuf) > 75) break;
 if(strlen(txtbuf)>0) strcat(txtbuf, " ");
 strncpy(prtbuf, ARGVÝi¨, 8); prtbufÝ8¨=0;
 strncat(txtbuf, prtbuf, 75-strlen(txtbuf));
 while (txtbufÝstrlen(txtbuf)-1¨ == ' ')
        txtbufÝstrlen(txtbuf)-1¨ =  0;
 }

memset(prtbuf, 0, 80);
for (i=0; i<col1; i++) strcat(prtbuf, " ");
strcat(prtbuf, "STEP: ");
strncat(prtbuf, txtbuf, 75-strlen(prtbuf));
while(strlen(prtbuf) < col2) strcat(prtbuf, " ");
if (rc == -1)
 strncat(prtbuf, "skipped", 75-strlen(prtbuf));
else {
 sprintf(txtbuf, "RC: %d", rc);
 strncat(prtbuf, txtbuf, 75-strlen(prtbuf));
 }

fprintf(stderr, "%s\n", prtbuf);

if (rc == -1) exit(1);   // warning for skipped
if (rc >  tc) exit(1);   // warning for bad rc

exit (0);              // no warning
}
